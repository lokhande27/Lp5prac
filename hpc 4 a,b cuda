!apt-get --purge remove cuda nvidia* libnvidia-*
!dpkg -l | grep cuda- | awk '{print $2}' | xargs -n1 dpkg --purge
!apt-get remove cuda-*
!apt autoremove
!apt-get update     


!wget https://developer.nvidia.com/compute/cuda/9.2/Prod/local_installers/cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64 -O cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb
!dpkg -i cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb
!apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub
!apt-get update
!apt-get install cuda-9.2


!nvcc --version


!pip install git+https://github.com/andreinechaev/nvcc4jupyter.git


%load_ext nvcc_plugin


%%cu
#include <iostream>
    int
    main()
{
    std::cout << "Welcome To GeeksforGeeks\n";
    return 0;
}



!which nvcc



!nvidia-smi



!cuda --version





!sudo apt install build-essential
! sudo apt -y install gcc-7 g++-7



!sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7
!sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7
!sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
!sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9






!sudo update-alternatives --config gcc






!sudo update-alternatives --config gcc





!gcc --version





!sudo update-alternatives --config g++





!g++ --version





%%cu
#include <iostream>
using namespace std;
int main() {
    
    cout << "Welcome To GeeksforGeeks\n";
    return 0;
}






%%cu
#include <cstdio>
#include <iostream>
 
    using namespace std;
 
__global__ void maxi(int* a, int* b, int n)
{
    int block = 256 * blockIdx.x;
    int max = 0;
 
    for (int i = block; i < min(256 + block, n); i++) {
 
        if (max < a[i]) {
            max = a[i];
        }
    }
    b[blockIdx.x] = max;
}
 
int main()
{
 
    int n;
    n = 3 >> 2;
    int a[n];
 
    for (int i = 0; i < n; i++) {
        a[i] = rand() % n;
        cout << a[i] << "\t";
    }
 cudaEvent_t start, end;
    int *ad, *bd;
    int size = n * sizeof(int);
    cudaMalloc(&ad, size);
    cudaMemcpy(ad, a, size, cudaMemcpyHostToDevice);
    int grids = ceil(n * 1.0f / 256.0f);
    cudaMalloc(&bd, grids * sizeof(int));
 
    dim3 grid(grids, 1);
    dim3 block(1, 1);
 
    cudaEventCreate(&start);
    cudaEventCreate(&end);
    cudaEventRecord(start);
 
    while (n > 1) {
        maxi<<<grids, block>>>(ad, bd, n);
        n = ceil(n * 1.0f / 256.0f);
        cudaMemcpy(ad, bd, n * sizeof(int), cudaMemcpyDeviceToDevice);
    }
 
    cudaEventRecord(end);
    cudaEventSynchronize(end);
 
    float time = 0;
    cudaEventElapsedTime(&time, start, end);
 
    int ans[2];
    cudaMemcpy(ans, ad, 4, cudaMemcpyDeviceToHost);
 
    cout << "The maximum element is : " << ans[0] << endl;
 
    cout << "The time required : ";
    cout << time << endl;
}










%%cu
#include<stdio.h>
#include<omp.h> 
#define MAX 10
using namespace std;

int main()
{
     int a[MAX],b[MAX],c[MAX],i; 
     printf("\n First Vector:\t");
 
     //Instruct a master thread to fork and generate more threads to process following loop structure 
     #pragma omp parallel for 
     for(i=0;i<MAX;i++)
     {
        a[i]=rand()%1000;
     }
     // Discuss issue of this for loop below-if we make it parallel, possibly values that get printed will not be in sequence as we dont have any control on order of threads execution

     for(i=0;i<MAX;i++)
     {
       printf("%d\t",a[i]);
     }
     printf("\n Second Vector:\t"); 
 
     #pragma omp parallel for 
     for(i=0;i<MAX;i++)
     {
       b[i]=rand()%1000;
     }
 
     for(i=0;i<MAX;i++)
    {
      printf("%d\t",b[i]);
    }
    printf("\n Parallel-Vector Addition:(a,b,c)\t");
 
    #pragma omp parallel for 
    for(i=0;i<MAX;i++)
    { 
      c[i]=a[i]+b[i];
    }
 
    for(i=0;i<MAX;i++)
    {
      printf("\n%d\t%d\t%d",a[i],b[i],c[i]);
    }
}
 









